# coding: utf-8

import re
import urllib.request
from pathlib import Path

import pandas as pd

codes = {
    "MOW": "Москва",
    "MOS": "Московская область",
    "SPE": "Санкт-Петербург",
    "NIZ": "Нижегородская область",
    "DA": "Республика Дагестан",
    "MUR": "Мурманская область",
    "KDA": "Краснодарский край",
    "TUL": "Тульская область",
    "ROS": "Ростовская область",
    "KLU": "Калужская область",
    "BRY": "Брянская область",
    "RYA": "Рязанская область",
    "SVE": "Свердловская область",
    "LEN": "Ленинградская область",
    "TT": "Республика Татарстан",
    "BA": "Республика Башкортостан",
    "SE": "Республика Северная Осетия — Алания",
    "KRS": "Курская область",
    "IN": "Республика Ингушетия",
    "VLA": "Владимирская область",
    "MO": "Республика Мордовия",
    "KYA": "Красноярский край",
    "TAM": "Тамбовская область",
    "CU": "Чувашская Республика",
    "STA": "Ставропольский край",
    "KO": "Республика Коми",
    "YAR": "Ярославская область",
    "ME": "Республика Марий Эл",
    "TVE": "Тверская область",
    "KHA": "Хабаровский край",
    "ORL": "Орловская область",
    "ORE": "Оренбургская область",
    "NVS": "Новосибирская область",
    "CHE": "Челябинская область",
    "VOR": "Воронежская область",
    "YAN": "Ямало-Ненецкий автономный округ",
    "PER": "Пермский край",
    "KB": "Кабардино-Балкарская Республика",
    "KIR": "Кировская область",
    "SAR": "Саратовская область",
    "CE": "Чеченская Республика",
    "SMO": "Смоленская область",
    "PNZ": "Пензенская область",
    "LIP": "Липецкая область",
    "ULY": "Ульяновская область",
    "TYU": "Тюменская область",
    "PRI": "Приморский край",
    "ALT": "Алтайский край",
    "KGD": "Калининградская область",
    "IVA": "Ивановская область",
    "SAM": "Самарская область",
    "VGG": "Волгоградская область",
    "BEL": "Белгородская область",
    "KHM": "Ханты-Мансийский АО",
    "KC": "Карачаево-Черкесская Республика",
    "AST": "Астраханская область",
    "BU": "Республика Бурятия",
    "NGR": "Новгородская область",
    "KAM": "Камчатский край",
    "KK": "Республика Хакасия",
    "SA": "Республика Саха (Якутия)",
    "KL": "Республика Калмыкия",
    "UD": "Удмуртская Республика",
    "KOS": "Костромская область",
    "ARK": "Архангельская область",
    "VLG": "Вологодская область",
    "PSK": "Псковская область",
    "AD": "Республика Адыгея",
    "ZAB": "Забайкальский край",
    "KEM": "Кемеровская область",
    "YEV": "Еврейская автономная область",
    "IRK": "Иркутская область",
    "OMS": "Омская область",
    "MAG": "Магаданская область",
    "TOM": "Томская область",
    "CR": "Республика Крым",
    "SEV": "Севастополь",
    "KR": "Республика Карелия",
    "AMU": "Амурская область",
    "KGN": "Курганская область",
    "TY": "Республика Тыва",
    "GA": "Республика Алтай",
    "NEN": "Ненецкий автономный округ",
    "SAK": "Сахалинская область",
    "CHU": "Чукотский автономный округ",
}


def get_region_json(
        region_code: str,
        url: str = "https://xn--80aesfpebagmfblc0a.xn--p1ai/covid_data.json?do=region_stats&code=RU-",
) -> pd.DataFrame:
    url += region_code
    region_json = urllib.request.urlopen(url).read().decode()
    region_frame = pd.read_json(region_json, convert_dates=False)
    region_frame["region_code"] = region_code
    print(region_code, "shape is", region_frame.shape)
    return region_frame


df = pd.DataFrame()
for region_code in codes.keys():
    df = df.append(get_region_json(region_code))
df["region_name"] = df["region_code"].map(codes)
df["date"] = pd.to_datetime(
    df["date"].apply(lambda x: re.sub(
        r"(\d{2}).(\d{2}).(\d{4})", r"\3-\2-\1", x))
)

p = Path("./data/")
if not p.exists():
    p.mkdir()

df.to_csv(p / "covid19_data_ru_government.csv", index=False)
